# -*- coding: utf-8 -*-
"""simple RNN model on MNIST dataset

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1uWmFLEZoLrheIyRgNb3Sp6ueRYZ8KO0U
"""

import tensorflow as tf
from tensorflow.keras.datasets import mnist

# Load and preprocess data
(x_train, y_train), (x_test, y_test) = mnist.load_data()
x_train, x_test = x_train / 255.0, x_test / 255.0  # Normalize the images
x_train = x_train.reshape((-1, 28, 28))  # Reshape for RNN input (timesteps, features)
x_test = x_test.reshape((-1, 28, 28))  # Reshape for RNN input

# One-hot encode labels
y_train = tf.keras.utils.to_categorical(y_train, 10)
y_test = tf.keras.utils.to_categorical(y_test, 10)

# Define simple RNN model
model = tf.keras.Sequential([
    tf.keras.layers.LSTM(128, activation='tanh', input_shape=(28, 28)),
    tf.keras.layers.Dense(10, activation='softmax')
])

# Compile the model
model.compile(loss='categorical_crossentropy', optimizer='adam', metrics=['accuracy'])

# Train the model
model.fit(x_train, y_train, batch_size=128, epochs=10, validation_data=(x_test, y_test))

# Evaluate the model
score = model.evaluate(x_test, y_test, verbose=0)
print('Test loss:', score[0])
print('Test accuracy:', score[1])