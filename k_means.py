# -*- coding: utf-8 -*-
"""K-MEANS

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1geULIaqHs7rxecBKewBHpfc2mOAhJQNi
"""

# Install the required library (only needed if not installed)
# !pip install -U scikit-learn

# Import necessary libraries
import numpy as np
import matplotlib.pyplot as plt
from sklearn.datasets import make_blobs
from sklearn.cluster import KMeans

# Step 1: Generate random data points (200 samples, 4 clusters, 2 features)
dataset = make_blobs(n_samples=200, centers=4, n_features=2, cluster_std=1.6, random_state=50)
points = dataset[0]  # Extracting only the points (X values)

# Step 2: Apply K-Means clustering (asking for 4 clusters)
kmeans = KMeans(n_clusters=4, random_state=0, n_init=10)
kmeans.fit(points)  # Train the model on the data

# Step 3: Get cluster centers (centroids)
clusters = kmeans.cluster_centers_
print(clusters)  # Print the centroids

# Step 4: Predict the cluster each point belongs to
y_km = kmeans.predict(points)

# Step 5: Plot the clusters with different colors
plt.scatter(points[y_km == 0, 0], points[y_km == 0, 1], s=50, color='red', label="Cluster 1")
plt.scatter(points[y_km == 1, 0], points[y_km == 1, 1], s=50, color='blue', label="Cluster 2")
plt.scatter(points[y_km == 2, 0], points[y_km == 2, 1], s=50, color='green', label="Cluster 3")
plt.scatter(points[y_km == 3, 0], points[y_km == 3, 1], s=50, color='yellow', label="Cluster 4")

# Step 6: Plot the cluster centers (black stars)
plt.scatter(clusters[:, 0], clusters[:, 1], marker='*', s=200, color='black', label="Centroids")

# Show the final plot with labels
plt.legend()
plt.show()